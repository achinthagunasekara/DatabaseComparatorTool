package GUI;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * @author: Archie Gunasekara
 * @date: 2013.07.02
 */
public class CompareData extends javax.swing.JPanel {
    
    private MainFrame mf;

    /**
     * Creates new form CompareData
     */
    public CompareData(MainFrame mf) {
	initComponents();
	this.mf = mf;
    }
    
    public void enableCompareButton(Boolean enable) {
	
	compare.setEnabled(enable);
    }
    
    public void setProgress(int val) {
	
	progress.setValue(val);
	this.validate();
    }
    
    public void setProgressBarText(String text) {
	
	progress.setStringPainted(true);
	progress.setString(text);
	validate();
    }
    
    public boolean getCheckServerOne() {
	
	return checkServerOne.isSelected();
    }
    
    public boolean getCheckServerTwo() {
	
	return checkServerTwo.isSelected();
    }
    
    public void setColListVals(ArrayList<String> arr) {
	
	String[] sArr = new String[arr.size()];
	//clear list
	colList.setListData(sArr);
	
	for(int i = 0; i < arr.size(); i++) {
	    
	    sArr[i] = arr.get(i);
	}
	
	colList.setListData(sArr);
    }
    
    public int[] getSelectedCols() throws Exception {
	
	if(colList.getSelectedIndices().length == 0) {
	    
	    throw new Exception("You must select at least one colmun to compare");
	}
	
	return colList.getSelectedIndices();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        compare = new javax.swing.JButton();
        progress = new javax.swing.JProgressBar();
        checkServerOne = new javax.swing.JCheckBox();
        checkServerTwo = new javax.swing.JCheckBox();
        colListScroll = new javax.swing.JScrollPane();
        colList = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(591, 93));
        setMinimumSize(new java.awt.Dimension(591, 93));
        setLayout(new java.awt.GridBagLayout());

        compare.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        compare.setText("Compare Data");
        compare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 8);
        add(compare, gridBagConstraints);

        progress.setPreferredSize(new java.awt.Dimension(250, 30));
        progress.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(progress, gridBagConstraints);

        checkServerOne.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        checkServerOne.setText("Server - Left");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(checkServerOne, gridBagConstraints);

        checkServerTwo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        checkServerTwo.setText("Server - Right");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(checkServerTwo, gridBagConstraints);

        colListScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        colListScroll.setMaximumSize(null);
        colListScroll.setMinimumSize(null);
        colListScroll.setPreferredSize(new java.awt.Dimension(200, 0));

        colList.setMaximumSize(null);
        colList.setMinimumSize(null);
        colList.setName(""); // NOI18N
        colList.setPreferredSize(null);
        colListScroll.setViewportView(colList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(colListScroll, gridBagConstraints);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        add(jSeparator2, gridBagConstraints);

        jLabel1.setText("Scan Server for Unique Records");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Compare Following Fields");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        add(jLabel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void compareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareActionPerformed
        
	if(getCheckServerOne() || getCheckServerTwo()) {
	    
	    mf.goCompare();
	}
	else {
	    
	    JOptionPane.showMessageDialog(this, "You must at least select one server to compare with the other");
	}
    }//GEN-LAST:event_compareActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkServerOne;
    private javax.swing.JCheckBox checkServerTwo;
    private javax.swing.JList colList;
    private javax.swing.JScrollPane colListScroll;
    private javax.swing.JButton compare;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JProgressBar progress;
    // End of variables declaration//GEN-END:variables
}
