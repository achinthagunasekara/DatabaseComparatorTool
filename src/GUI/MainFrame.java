package GUI;

import DBTools.TableComparatorRunner;
import MainApp.AppStateHolder;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 * @author: Archie Gunasekara
 * @date: 2013.07.02
 */
public class MainFrame extends javax.swing.JFrame {

    private AppStateHolder appState;
    private DBServerSelector dbServerSelector;
    private DatabaseSelector dbSelectorOne;
    private DatabaseSelector dbSelectorTwo;
    private TableComparator tComparatorOne;
    private TableComparator tComparatorTwo;
    private CompareData compData;
    private Thread compareThread;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame(AppStateHolder appState) {
	initComponents();
	this.appState = appState;
	
	AppMenu appMenu = new AppMenu(this);
	setJMenuBar(appMenu);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Database Comparator Tool");
        setName("mainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1100, 850));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
        getContentPane().add(topPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        getContentPane().add(rightPanel, gridBagConstraints);

        leftPanel.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        getContentPane().add(leftPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

	disposeAllConnections();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    public void initializeApplication() {
	
	dbServerSelector = new DBServerSelector(this, appState);
	topPanel.add(dbServerSelector);
	dbServerSelector.setVisible(true);
	validate();
    }
    
    public void showDatabaseSelector() {
	
	dbServerSelector.setVisible(false);
	dbSelectorOne = new DatabaseSelector(this, appState, 1);
	dbSelectorTwo = new DatabaseSelector(this, appState, 2);
	leftPanel.add(dbSelectorOne);
	rightPanel.add(dbSelectorTwo);
	validate();
    }
    
    public void checkReadyAndGo() {

	if(appState.getDbOperationManagerOne() != null && appState.getDbOperationManagerTwo() != null) {
	    
	    dbSelectorOne.setVisible(false);
	    dbSelectorTwo.setVisible(false);
	    showTableList();
	    validate();
	}
    }
    
    private void showTableList() {
	
	compData = new CompareData(this);
	tComparatorOne = new TableComparator(this, appState.getDbOperationManagerOne(), "Server : " + dbSelectorOne.getServerAddr() + " | DB : " + dbSelectorOne.getDatabase());
	tComparatorTwo = new TableComparator(this, appState.getDbOperationManagerTwo(), "Server : " + dbSelectorTwo.getServerAddr() + " | DB : " + dbSelectorTwo.getDatabase());
	topPanel.add(compData);
	leftPanel.add(tComparatorOne);
	rightPanel.add(tComparatorTwo);
    }
    
    public void goCompare() {

	try {
	    
	    HashMap<String, ArrayList> tableInfoOne = appState.getDbOperationManagerOne().getTableInfo(tComparatorOne.getSelectedTable());
	    HashMap<String, ArrayList> tableInfoTwo = appState.getDbOperationManagerTwo().getTableInfo(tComparatorTwo.getSelectedTable());

	    if(compareTwoArrayListVals(tableInfoOne.get("COL_NAMES"), tableInfoTwo.get("COL_NAMES")) && compareTwoArrayListVals(tableInfoOne.get("COL_TYPES"), tableInfoTwo.get("COL_TYPES"))) {
		
		ArrayList<String[]> dataTableOne = appState.getDbOperationManagerOne().getAllDataFromTable(tComparatorOne.getSelectedTable(), tableInfoOne.get("COL_NAMES").size(), tComparatorOne.getWherePart());
		ArrayList<String[]> dataTableTwo = appState.getDbOperationManagerTwo().getAllDataFromTable(tComparatorTwo.getSelectedTable(), tableInfoTwo.get("COL_NAMES").size(), tComparatorTwo.getWherePart());

		compareThread = new TableComparatorRunner(this, dataTableOne, dataTableTwo, tableInfoOne.get("COL_NAMES"), tComparatorOne.getSelectedTable(), compData.getSelectedCols(), compData.getCheckServerOne(), compData.getCheckServerTwo());
		compareThread.start();
	    }
	    else {
		
		JOptionPane.showMessageDialog(this, tComparatorOne.getSelectedTable() + " and " + tComparatorTwo.getSelectedTable() + " have differnet columns. Can not compare them!");
	    }
	}
	catch (SQLException sqlEx) {
	    
	    JOptionPane.showMessageDialog(this, "Error getting information from database! \nError : " + sqlEx.getMessage());
	}
	catch(NumberFormatException nfEx) {
	    
	    JOptionPane.showMessageDialog(this, "Please enter a valid number! \nError : " + nfEx);
	}
	catch(NullPointerException nullEx) {
	    
	    JOptionPane.showMessageDialog(this, "Null Exception, make sure all fileds are completed! \nError : " + nullEx.getMessage());
	}
	catch(Exception ex) {
	    
	    JOptionPane.showMessageDialog(this, "An error occured! \nError : " + ex.getMessage());
	}
    }
    
    private Boolean compareTwoArrayListVals(ArrayList<String> listOne, ArrayList<String> listTwo) {
	
	if(listOne.size() != listTwo.size()) {
	    
	    return false;
	}
	
	for(int i = 0; i < listOne.size(); i++) {
	    
	    if(!listOne.get(i).equals(listTwo.get(i))) {
		
		return false;
	    }
	}
	
	return true;
    }
    
    public TableComparator getTComparatorOne() {
	
	return tComparatorOne;
    }
    
    public TableComparator getTComparatorTwo() {
	
	return tComparatorTwo;
    }
    
    public CompareData getCompData() {
	
	return compData;
    }
    
    public void reset() {
	
	disposeAllConnections();
	//start over
	initializeApplication();
    }
    
    public void disposeAllConnections() {
	
	try {
	    
	    appState.reset();
	}
	catch(SQLException sqlEx) {
	    
	    JOptionPane.showMessageDialog(this, "Sql Exception - " + sqlEx.getMessage());
	}
	catch(NullPointerException nEx) {
	    
	    JOptionPane.showMessageDialog(this, "No Active server connections to close - " + nEx.getMessage());
	}
	
	if(dbServerSelector != null) {
	    
	    dbServerSelector.setVisible(false);
	}
	if(dbSelectorOne != null) {
	    
	    dbSelectorOne.setVisible(false);
	}
	if(dbSelectorTwo != null) {
	    
	    dbSelectorTwo.setVisible(false);
	}
	if(tComparatorOne != null) {
	    
	    tComparatorOne.setVisible(false);
	}
	if(tComparatorTwo != null) {
	    
	    tComparatorTwo.setVisible(false);
	}
	if(compData != null) {
	    
	    compData.setVisible(false);
	}
	if(compareThread != null && compareThread.isAlive()) {
	    
	    compareThread.interrupt();
	}
    }
}
